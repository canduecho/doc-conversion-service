# Cursor Project Rules

## 项目概述
这是一个文档转换服务项目，支持多种格式之间的转换，包括 PDF、Office 文档、图片、Markdown 等格式。

## 代码风格规范

### 基本规范
- **缩进**: 使用 2 个空格
- **引号**: 优先使用单引号，字符串模板使用反引号
- **分号**: 语句结尾必须使用分号
- **空格**: 操作符前后加空格，逗号后加空格
- **换行**: 保持代码整洁，适当换行提高可读性

### 命名规范
- **变量**: 使用 `camelCase`
- **常量**: 使用 `UPPER_SNAKE_CASE`
- **函数**: 使用 `camelCase`，动词开头
- **文件**: 使用 `snake_case`

### 注释风格
```python
/**
 * 函数功能描述
 * @param {string} param1 - 参数1描述
 * @param {Object} param2 - 参数2描述
 * @returns {Promise<Object>} 返回值描述
 */
async def function_name(param1, param2):
    # 行内注释使用 #
    result = await some_operation()
    return result
```

## 项目结构规范

### 目录组织
```
app/
├── api/           # API 路由和模型
├── config/        # 配置文件
├── converters/    # 转换器模块
├── services/      # 服务层
├── utils/         # 工具函数
└── tests/         # 测试文件

bugs/              # Bug 修复相关文件
├── tests/         # Bug 修复测试文件
├── docs/          # Bug 修复总结文档
└── fixes/         # Bug 修复代码
```

## Bug Fix 规范

### 测试文件创建
- 所有 bug fix 相关的测试文件必须放在 `bugs/tests/` 目录中
- 测试文件命名格式：`test_[bug_description]_[date].py`
- 测试文件必须包含完整的测试用例和错误重现步骤

### 总结文档
- 所有 bug fix 的总结文档必须放在 `bugs/docs/` 目录中
- 文档命名格式：`[BUG_TYPE]_FIX_SUMMARY_[date].md`
- 文档必须包含：
  - 问题描述
  - 错误分析
  - 修复方案
  - 测试结果
  - 影响范围

### 修复代码
- 重要的 bug fix 代码可以放在 `bugs/fixes/` 目录中作为备份
- 修复代码必须包含详细的注释说明

## 开发工作流

### 代码组织
- 相关功能放在同一个文件中
- 工具函数放在 utils 目录
- 配置文件集中管理
- 测试文件与源文件对应

### 错误处理
- 所有异步操作使用 try-catch
- 记录详细的错误信息
- 提供有意义的错误消息
- 避免暴露敏感信息

### 日志记录
- 使用结构化日志
- 记录关键操作和错误
- 包含上下文信息
- 避免记录敏感数据

## 代码质量要求

### 可读性
- 函数长度控制在 50 行以内
- 变量名要有意义
- 避免深层嵌套
- 使用适当的空行分隔

### 可维护性
- 避免重复代码
- 使用函数提取公共逻辑
- 保持函数单一职责
- 及时重构复杂代码

### 性能考虑
- 避免不必要的循环
- 使用适当的数据结构
- 考虑内存使用
- 优化数据库查询

## 测试习惯

### 测试覆盖
- 编写单元测试
- 测试边界条件
- 测试错误情况
- 保持测试代码整洁

### 测试数据
- 使用有意义的测试数据
- 避免硬编码测试值
- 清理测试产生的数据
- 使用测试工具函数

## 文档习惯

### 代码文档
- 为公共函数编写文档
- 说明复杂的业务逻辑
- 记录重要的设计决策
- 保持文档与代码同步

### 项目文档
- 维护 README 文件
- 记录 API 接口
- 说明部署流程
- 记录常见问题

## 版本控制

### 提交规范
- 使用清晰的提交信息
- 每次提交只做一件事
- 提交前进行代码检查
- 及时提交代码

### 分支管理
- 使用功能分支开发
- 及时合并主分支更新
- 保持分支整洁
- 删除已合并的分支

## 安全考虑

### 数据安全
- 验证所有输入数据
- 避免 SQL 注入
- 保护敏感信息
- 使用安全的 API

### 代码安全
- 避免硬编码密码
- 使用环境变量
- 定期更新依赖
- 检查安全漏洞

## 性能优化

### 代码优化
- 避免不必要的计算
- 使用缓存机制
- 优化数据库查询
- 减少网络请求

### 资源管理
- 及时释放资源
- 使用连接池
- 监控内存使用
- 处理大文件

## 团队协作

### 代码审查
- 主动进行代码审查
- 接受建设性意见
- 保持代码一致性
- 分享最佳实践

### 知识分享
- 记录解决方案
- 分享技术经验
- 帮助团队成员
- 参与技术讨论

## 特殊规则

### Bug Fix 优先级
1. 严重错误（影响核心功能）
2. 数据丢失风险
3. 安全漏洞
4. 性能问题
5. 用户体验问题

### 测试要求
- 每个 bug fix 必须包含测试用例
- 测试必须能够重现原始错误
- 测试必须验证修复效果
- 测试必须包含边界条件

### 文档要求
- 每个 bug fix 必须更新相关文档
- 必须记录修复的影响范围
- 必须说明回滚方案
- 必须记录经验教训 